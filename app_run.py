# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1dqjsgdt-8lw0r2F_Nw7tmFlxIhsrWNo4
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.tree import DecisionTreeRegressor
from sklearn.metrics import mean_squared_error
import streamlit as st

# Load dataset
def load_data(file_path):
    data = pd.read_csv(file_path)
    data['Datetime'] = pd.to_datetime(data['Datetime'])
    data['Total_consumption'] = data['Sub_metering_1'] + data['Sub_metering_2'] + data['Sub_metering_3']
    data['Month'] = data['Datetime'].dt.month
    data['Year'] = data['Datetime'].dt.year
    return data

# Preprocess data
def preprocess_data(data):
    grouped_data = data.groupby(['Year', 'Month'], as_index=False).agg({
        'Total_consumption': 'sum',
        'Voltage': 'mean',
        'Global_intensity': 'mean',
        'power_factor': 'mean'
    })
    return grouped_data

# Train model
def train_model(data):
    X = data[['Voltage', 'Global_intensity', 'power_factor']]
    y = data['Total_consumption']

    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

    # Linear Regression
    lr = LinearRegression()
    lr.fit(X_train, y_train)
    lr_pred = lr.predict(X_test)
    lr_rmse = np.sqrt(mean_squared_error(y_test, lr_pred))

    # Decision Tree
    dt = DecisionTreeRegressor(random_state=42)
    dt.fit(X_train, y_train)
    dt_pred = dt.predict(X_test)
    dt_rmse = np.sqrt(mean_squared_error(y_test, dt_pred))

    return lr, dt, lr_rmse, dt_rmse, X_train.columns

# Streamlit app
def run_streamlit_app():
    st.title("Prediksi Konsumsi Listrik Bulanan")

    st.sidebar.header("Input Data")
    voltage = st.sidebar.slider("Tegangan (Volt)", min_value=200.0, max_value=250.0, value=230.0, step=0.1)
    intensity = st.sidebar.slider("Intensitas Global (Ampere)", min_value=0.0, max_value=50.0, value=20.0, step=0.1)
    power_factor = st.sidebar.slider("Faktor Daya", min_value=0.8, max_value=1.0, value=0.95, step=0.01)

    if st.sidebar.button("Prediksi"):
        input_data = pd.DataFrame({
            'Voltage': [voltage],
            'Global_intensity': [intensity],
            'power_factor': [power_factor]
        })

        # Predict using Linear Regression
        lr_pred = lr.predict(input_data)[0]

        # Predict using Decision Tree
        dt_pred = dt.predict(input_data)[0]

        st.subheader("Hasil Prediksi")
        st.write(f"Prediksi konsumsi listrik (Linear Regression): {lr_pred:.2f} Wh")
        st.write(f"Prediksi konsumsi listrik (Decision Tree): {dt_pred:.2f} Wh")

    st.subheader("Visualisasi Data")
    fig, ax = plt.subplots()
    sns.lineplot(data=preprocessed_data, x='Month', y='Total_consumption', hue='Year', marker="o", ax=ax)
    plt.title("Konsumsi Listrik Bulanan")
    st.pyplot(fig)

if __name__ == "__main__":
    # Load and preprocess data
    file_path = '/mnt/data/power_factor.csv'
    data = load_data(file_path)
    preprocessed_data = preprocess_data(data)

    # Train models
    lr, dt, lr_rmse, dt_rmse, feature_names = train_model(preprocessed_data)

    # Print model performance
    print(f"Linear Regression RMSE: {lr_rmse}")
    print(f"Decision Tree RMSE: {dt_rmse}")

    # Run Streamlit app
    run_streamlit_app()